package org.tmf.dsmapi.agreement;

/**
 This class serves as the "facade" that provides the persistence context to the Agreement entity
 Requests on the Agreement resource are executed via the AgreementFacade
 **/

import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.tmf.dsmapi.commons.facade.AbstractFacade;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.tmf.dsmapi.commons.exceptions.BadUsageException;
import org.tmf.dsmapi.commons.exceptions.ExceptionType;
import org.tmf.dsmapi.commons.exceptions.UnknownResourceException;
import org.tmf.dsmapi.agreement.model.Agreement;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.text.SimpleDateFormat;
//import org.tmf.dsmapi.agreement.event.AppointmentEventPublisherLocal;
//import org.tmf.dsmapi.commons.utils.BeanUtils;

@Stateless
public class AgreementFacade extends AbstractFacade<Agreement> {
	@PersistenceContext(unitName = "DSAgreementPU")
	private EntityManager em;

	public AgreementFacade() {
		// Initialize the AbstractFacade to handle the Agreement Class
		super(Agreement.class);
	}

	// Override the abstract method
	@Override
	protected EntityManager getEntityManager() {
		return em;
	}

	// Validate mandatory fields and data types
	public void checkCreation(Agreement entity) throws BadUsageException, UnknownResourceException {
		Agreement ag = null;

		// Validate Agreement ID
		if (entity.getId() == null || entity.getId().isEmpty()) {
			Logger.getLogger(AgreementFacade.class.getName()).
				log(Level.INFO, "Agreement with autogenerated id is being posted");
		} else {
			try {
				ag = this.find(entity.getId());
                if (ag != null) {
                    throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC,
						"Duplicate Exception, Agreement with id :" + entity.getId() + " alreay exists");
                }
            } catch (UnknownResourceException ex) {
                //Do nothing create ok
                Logger.getLogger(AgreementFacade.class.getName()).
					log(Level.INFO, "Agreement with id = " + entity.getId() + " is being posted", ex);
            }
        }

		// Name is mandatory
		if (entity.getName() == null || entity.getId().isEmpty()) {
			throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "Agreement Name is mandatory");
		}

		// Engaged Party Role is mandatory
		if (entity.getEngagedPartyRole() == null) {
			throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "Engaged Party Role is mandatory");
		}

		// Agreement Item is mandatory
		if (entity.getAgreementItem() == null) {
			throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "Agreement Item is mandatory");
		}

		// If Completion Date is not provided, default it to today's date
		if (entity.getCompletionDate() == null) {
			entity.setCompletionDate(new Date());
			//entity.setCompletionDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
			// Add logic to default it to today
		}

		// If Version is not provided, default it to 0
		if (entity.getVersion() == null || entity.getVersion().isEmpty()) {
			entity.setVersion(Integer.toString(0));
		}
	}

	/*
	public Agreement patchAttributs(String id, Agreement partialEntity)
		throws UnknownResourceException, BadUsageException {
	}
	*/
}
